<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>SuperDoge - Token Stats</title>
<style>
  body {
    background: #121212;
    color: #fff;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  .container {
    max-width: 900px;
    margin: 2rem auto;
    padding: 0 1rem;
  }
  h2.section-title {
    border-bottom: 2px solid #ffd700;
    display: inline-block;
    margin-bottom: 1rem;
  }
  .stats-row {
    display: flex;
    justify-content: space-around;
    text-align: center;
    margin-bottom: 2rem;
  }
  .stat {
    flex: 1 1 30%;
  }
  .stat h4 {
    margin-bottom: 0.5rem;
  }
  .stat p {
    font-size: 2.5rem;
    font-weight: 700;
    position: relative;
  }

  /* Hover floating for 30 day burned count */
  #burn30Days.hovering {
    animation: floatUpDown 2s ease-in-out infinite;
    cursor: pointer;
  }
  @keyframes floatUpDown {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
  }

  /* Hit explosion bubble */
  #hit-effect {
    position: absolute;
    width: 50px;
    height: 50px;
    background: radial-gradient(circle, #ffdd00 0%, transparent 80%);
    border-radius: 50%;
    pointer-events: none;
    opacity: 0;
    transform: scale(0);
    transition: opacity 0.4s ease, transform 0.4s ease;
    z-index: 10;
  }

  /* Shake animation for Total Supply on hit */
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    20%, 60% { transform: translateX(-5px); }
    40%, 80% { transform: translateX(5px); }
  }
  #totalSupplyDisplay.shake {
    animation: shake 0.5s;
  }
</style>
</head>
<body>

<div class="container">
  <h2 class="section-title">Live Token Stats</h2>
  <div class="stats-row">
    <div class="stat">
      <h4>Total Supply</h4>
      <p id="totalSupplyDisplay">Loading...</p>
    </div>
    <div class="stat">
      <h4>Total Burned</h4>
      <p id="burnedSupply">Loading...</p>
    </div>
    <div class="stat">
      <h4>Donated to Charity</h4>
      <p id="donationUSD">$ Loading...</p>
    </div>
  </div>
  <div style="text-align:center;">
    <h4>Token Volume in Last 30 Days: <span id="volume30Days">Loading...</span></h4>
    <h4>Burned in Last 30 Days: <span id="burn30Days">Loading...</span></h4>
  </div>
</div>

<div id="hit-effect"></div>

<script>
  const apiKey = "QRQ3R8MI37HB9HXIJ22YQ9CC734R28SM1S";
  const contract = "0x622a1297057ea233287ce77bdbf2ab4e63609f23";
  const totalSupplyStartTokens = 1000000000;

  // Format tokens (divide raw by 1e9, add commas)
  function formatTokens(raw) {
    return Math.round(raw / 1e9).toLocaleString();
  }

  // Animate number counting slower
  function animateCount(id, endValue, duration = 4000, callback) {
    const el = document.getElementById(id);
    let start = 0;
    const steps = 100;
    const increment = endValue / steps;
    const stepTime = duration / steps;
    let currentStep = 0;

    const interval = setInterval(() => {
      currentStep++;
      start = increment * currentStep;
      if (currentStep >= steps) {
        el.textContent = Math.round(endValue).toLocaleString();
        clearInterval(interval);
        if (callback) callback();
      } else {
        el.textContent = Math.round(start).toLocaleString();
      }
    }, stepTime);
  }

  // Fetch circulating supply from BscScan API
  async function fetchCirculatingSupply() {
    const res = await fetch(`https://api.bscscan.com/api?module=stats&action=tokensupply&contractaddress=${contract}&apikey=${apiKey}`);
    const data = await res.json();
    return parseFloat(data.result);
  }

  // Fetch 30 day token tx for volume and burn estimate
  async function fetchBurnAndVolume30Days() {
    const now = Math.floor(Date.now() / 1000);
    const thirtyDaysAgo = now - 30 * 24 * 60 * 60;
    let totalBurned = 0;
    let totalVolume = 0;
    let page = 1;
    const offset = 100;
    let keepGoing = true;

    while (keepGoing && page <= 10) {
      const url = `https://api.bscscan.com/api?module=account&action=tokentx&contractaddress=${contract}&page=${page}&offset=${offset}&sort=desc&apikey=${apiKey}`;
      const res = await fetch(url);
      const data = await res.json();
      if (!data.result || data.result.length === 0) break;

      for (const tx of data.result) {
        const time = parseInt(tx.timeStamp);
        if (time < thirtyDaysAgo) {
          keepGoing = false;
          break;
        }
        const amount = parseFloat(tx.value);
        totalVolume += amount;
        totalBurned += amount * 0.02;
      }
      if (data.result.length < offset) break;
      page++;
    }

    return {
      burned: totalBurned,
      volume: totalVolume
    };
  }

  // Donation (hardcoded for now)
  function getDonationUSD() {
    const donatedBNB = 836.34 + 18.88;
    const donatedUSD = donatedBNB * 650;
    return donatedUSD.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
  }

  // Show hit explosion effect & animate hit movement of burn30 to total supply
  function hitAnimation(burn30Raw, circulatingRaw) {
    const burnEl = document.getElementById("burn30Days");
    const totalEl = document.getElementById("totalSupplyDisplay");
    const hitEffect = document.getElementById("hit-effect");

    // Add hover animation to burn30
    burnEl.classList.add("hovering");

    // After 2 seconds, move the burnEl number to hit the total supply
    setTimeout(() => {
      burnEl.classList.remove("hovering");

      // Get positions for animation
      const burnRect = burnEl.getBoundingClientRect();
      const totalRect = totalEl.getBoundingClientRect();
      const hitX = totalRect.left + totalRect.width / 2 - burnRect.left - burnRect.width / 2;
      const hitY = totalRect.top + totalRect.height / 2 - burnRect.top - burnRect.height / 2;

      // Clone burnEl to animate flying number
      const flyNum = burnEl.cloneNode(true);
      flyNum.style.position = 'fixed';
      flyNum.style.left = burnRect.left + 'px';
      flyNum.style.top = burnRect.top + 'px';
      flyNum.style.margin = 0;
      flyNum.style.zIndex = 9999;
      flyNum.style.transition = 'transform 0.8s ease, opacity 0.8s ease';
      document.body.appendChild(flyNum);

      // Trigger move to total supply number
      requestAnimationFrame(() => {
        flyNum.style.transform = `translate(${hitX}px, ${hitY}px) scale(1.5)`;
        flyNum.style.opacity = '0';
      });

      // Show hit effect bubble at total supply center
      hitEffect.style.left = (totalRect.left + totalRect.width / 2 - 25) + 'px';
      hitEffect.style.top = (totalRect.top + totalRect.height / 2 - 25) + 'px';
      hitEffect.style.opacity = '1';
      hitEffect.style.transform = 'scale(1)';

      // Shake total supply number
      totalEl.classList.add('shake');

      // After animation end (800ms)
      setTimeout(() => {
        // Remove flying number and hit effect
        flyNum.remove();
        hitEffect.style.opacity = '0';
        hitEffect.style.transform = 'scale(0)';
        totalEl.classList.remove('shake');

        // Update total supply by subtracting burned 30 day amount (rounded tokens)
        const newTotalTokens = Math.round((circulatingRaw) / 1e9);
        totalEl.textContent = newTotalTokens.toLocaleString();

      }, 900);
    }, 2000);
  }

  async function main() {
    // Fetch data
    const circulatingRaw = await fetchCirculatingSupply();
    const { burned: burn30Raw, volume: volume30Raw } = await fetchBurnAndVolume30Days();

    // Calculate total burned supply (total supply start - circulating)
    const totalBurnedTokens = (totalSupplyStartTokens * 1e9) - circulatingRaw;

    // Update stats on page
    document.getElementById("totalSupplyDisplay").textContent = formatTokens(circulatingRaw);
    document.getElementById("burnedSupply").textContent = formatTokens(totalBurnedTokens);
    document.getElementById("donationUSD").textContent = getDonationUSD();

    animateCount("volume30Days", volume30Raw / 1e9, 3500);

    animateCount("burn30Days", burn30Raw / 1e9, 4000, () => {
      // After counting burned30, do hit animation & update total supply
      hitAnimation(burn30Raw, circulatingRaw);
    });
  }

  main();
</script>

</body>
</html>
