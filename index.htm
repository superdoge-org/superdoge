<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Superdoge | The First Crypto Superhero</title>
  <!-- SEO Meta Tags -->
  <meta name="description" content="Superdoge is the first crypto superhero meme coin on BNB Chain, combining deflationary tokenomics with real-world charity impact. Join the community today!">
  <meta name="keywords" content="Superdoge, crypto, meme coin, BNB Chain, deflationary tokenomics, charity, DeFi, SUPDOG">
  <meta name="author" content="Superdoge Community">
  <!-- Open Graph / Facebook -->
  <meta property="og:title" content="Superdoge | The First Crypto Superhero" />
  <meta property="og:description" content="Superdoge is the first crypto superhero meme coin on BNB Chain, combining deflationary tokenomics with real-world charity impact." />
  <meta property="og:image" content="https://superdoge.org/images/superdoge_logo.png" />
  <meta property="og:url" content="https://superdoge.org" />
  <meta property="og:type" content="website" />
  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="Superdoge | The First Crypto Superhero" />
  <meta name="twitter:description" content="Superdoge is the first crypto superhero meme coin on BNB Chain, combining deflationary tokenomics with real-world charity impact." />
  <meta name="twitter:image" content="https://superdoge.org/images/superdoge_logo.png" />
  <!-- Font & Styles -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" />
  <style>
    html { box-sizing: border-box; font-size: 16px; }
    *, *::before, *::after { box-sizing: inherit; }
    body {
      margin: 0;
      font-family: 'Poppins', Arial, sans-serif;
      background: radial-gradient(circle at center top, #dce3f7 0%, #b0c4de 100%);
      color: #222;
      line-height: 1.5;
      font-weight: 400;
    }
    header {
      background: #002d72;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 2rem 1rem 1.2rem 1rem;
    }
    .main-logo {
      display: block;
      width: 240px;
      max-width: 95vw;
      min-width: 160px;
      height: auto;
      margin: 0 auto 1.2rem auto;
    }
    @media (max-width: 900px) {
      .main-logo { width: 180px; }
    }
    @media (max-width: 600px) {
      .main-logo {
        width: 60%;
        max-width: 180px;
        min-width: 100px;
        margin-bottom: 1rem;
      }
    }
    .tagline {
      font-weight: 700;
      font-size: 2rem;
      color: #fff;
      background: #0057b8;
      padding: 0.4em 1.4em;
      border-radius: 2em;
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
      margin: 0 auto 1.5rem auto;
      display: inline-block;
      text-align: center;
      letter-spacing: 0.03em;
    }
    @media (max-width: 600px) {
      .tagline { font-size: 1.2rem; padding: 0.3em 1em; }
    }
    h1, h2, h3, .stat-title {
      font-family: 'Poppins', Arial, sans-serif;
      font-weight: 700;
      letter-spacing: 0.03em;
      margin: 0;
    }
    h2 {
      font-size: 2.25rem;
      color: #002d72;
      margin-bottom: 1rem;
      text-align: center;
    }
    h3, .stat-title {
      font-size: 1.5rem;
      color: #002d72;
      margin-bottom: 0.5rem;
    }
    /* Stats grid */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      padding: 2rem 1rem;
      max-width: 900px;
      margin: auto;
    }
    .stat {
      background: #fff;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.15);
      padding: 1.5rem;
      text-align: center;
    }
    .stat-value {
      font-weight: 600;
      font-size: 2rem;
      color: #0057b8;
      font-family: 'Poppins', Arial, sans-serif;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: color 0.4s;
    }
    .burn-anim {
      animation: burnColor 0.7s;
    }
    @keyframes burnColor {
      0% { color: #666; }
      30% { color: #ff4500; }
      60% { color: #ffa500; }
      100% { color: #0057b8; }
    }
    @media (max-width: 600px) { .stat-value { font-size: 1.3rem; } }
    /* ...rest of your CSS unchanged... */
    footer {
      background:#f7f7f7;
      color:#555;
      font-family: 'Poppins', Arial, sans-serif;
      font-size: 0.9rem;
      padding: 2rem 1rem;
      text-align: center;
      max-width: 900px;
      margin: 0 auto 3rem;
      line-height: 1.4;
    }
    @media (max-width: 1200px) {
      .stats-grid,
      .impact-section,
      .about-section,
      .media-section,
      .tokenomics-section,
      #how-to-buy,
      .links-section,
      footer {
        max-width: 98vw;
      }
    }
  </style>
</head>
<body>
  <header>
    <img src="images/superdoge_logo.png" alt="Superdoge Logo" class="main-logo" />
    <div class="tagline">Saving the World One Block at a Time</div>
  </header>

  <section class="stats-grid">
    <div class="stat">
      <div class="stat-title">Total Supply</div>
      <div class="stat-value" id="totalSupply">Loading...</div>
    </div>
    <div class="stat">
      <div class="stat-title">Burned (30d)</div>
      <div class="stat-value" id="burnedVolumeRange">.....</div>
    </div>
    <div class="stat">
      <div class="stat-title">Volume (30d)</div>
      <div class="stat-value" id="volumeRange">Loading...</div>
    </div>
    <div class="stat">
      <div class="stat-title">Liquidity</div>
      <div class="stat-value" id="liquidityUSD">Loading...</div>
    </div>
    <div class="stat">
      <div class="stat-title">Market Cap</div>
      <div class="stat-value" id="marketCap">Loading...</div>
    </div>
    <div class="stat">
      <div class="stat-title">Token Price</div>
      <div class="stat-value" id="tokenPrice">Loading...</div>
    </div>
  </section>

  <!-- ...rest of your sections unchanged... -->

  <footer>
    <strong>Disclaimer:</strong> Superdoge ($SUPDOG) is a parody meme coin with no intrinsic value or financial guarantees, powered by its dedicated community. Stats may be delayed by up to 1 hour and can glitch—always verify data via the smart contract (links above). Not affiliated with Krypto the Superdog, Superman, Dogecoin, Floki, Babydogecoin, or Brokoli. Spot an error? Let us know!<br />
    2025 — Superdoge.org: The First Crypto Superhero, Saving the World One Block at a Time.
  </footer>

  <script>
    const formatter = (n) => Number(n).toLocaleString(undefined, { maximumFractionDigits: 6 });
    const formatter0 = (n) => Number(n).toLocaleString(undefined, { maximumFractionDigits: 0 });

    async function loadStats() {
      try {
        const [totalData, tokenData, bnbData, liquidity, allLog] = await Promise.all([
          fetch("/stats/total-supply.json").then((r) => r.json()),
          fetch("/stats/token-price.json").then((r) => r.json()),
          fetch("/stats/bnb-price.json").then((r) => r.json()),
          fetch("/stats/liquidity.json").then((r) => r.json()),
          fetch("/stats/all-data.json").then((r) => r.json()),
        ]);

        const latest = allLog[allLog.length - 1];
        let totalSupply = totalData.totalSupply;
        let tokenPrice = tokenData.price;
        let volume30d = allLog.slice(-30).reduce((acc, row) => acc + row.volume, 0);
        let burned30d = allLog.slice(-30).reduce((acc, row) => acc + row.burned, 0);

        document.getElementById("totalSupply").textContent = formatter0(totalSupply + burned30d);

        // Sequence: Volume → Burned (with effect) → Total Supply
        animateCount("volumeRange", 0, volume30d, " SUPDOG", 1200);

        setTimeout(() => {
          animateCount("burnedVolumeRange", 0, burned30d, " SUPDOG", 1200, true);
          // Subtle burn effect after count finishes
          setTimeout(() => {
            const el = document.getElementById("burnedVolumeRange");
            el.classList.add("burn-anim");
            setTimeout(() => el.classList.remove("burn-anim"), 700);
          }, 1200);
        }, 1200);

        setTimeout(() => {
          animateCount("totalSupply", totalSupply + burned30d, totalSupply, "", 1000);
        }, 2600);

        document.getElementById("liquidityUSD").textContent = "$" + formatter0(liquidity.totalUSD);
        document.getElementById("tokenPrice").textContent = "$" + formatter(tokenPrice);
        document.getElementById("marketCap").textContent = "$" + formatter0(totalSupply * tokenPrice);

        let bnbPrice = bnbData.price;
        document.getElementById("bnbUsdValue").textContent = "$" + formatter0(836.34 * bnbPrice);
      } catch (err) {
        console.error("❌ Failed to load stats:", err);
      }
    }

    function animateCount(id, start, end, suffix = "", duration = 1000, burnStyle = false) {
      const el = document.getElementById(id);
      const range = end - start;
      const increment = range / (duration / 30);
      let current = start;
      let steps = 0;
      const interval = setInterval(() => {
        current += increment;
        steps++;
        if ((increment > 0 && current >= end) || (increment < 0 && current <= end) || steps > 150) {
          current = end;
          clearInterval(interval);
        }
        el.innerHTML = `<span class="${burnStyle ? "burn-anim" : ""}">${formatter0(current)}${suffix}</span>`;
      }, 30);
    }

    loadStats();
  </script>
</body>
</html>
