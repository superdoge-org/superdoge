<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>SuperDoge - The Crypto Superhero</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="assets/styles.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <style>
    body {
      background: linear-gradient(to bottom right, #0f0f0f, #1a1a1a);
      color: #fff;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .hero {
      background: url('assets/superdoge-bg.jpg') center/cover no-repeat;
      padding: 100px 0;
      text-align: center;
    }
    .hero h1 {
      font-size: 4rem;
      color: #ffd700;
      text-shadow: 2px 2px 8px #000;
    }
    .hero p {
      max-width: 800px;
      margin: 1rem auto 0;
      font-size: 1.25rem;
    }
    .section-title {
      border-bottom: 2px solid #ffd700;
      display: inline-block;
      margin-bottom: 1rem;
      padding-bottom: .5rem;
    }
    .stat-box {
      background-color: #222;
      border-radius: 12px;
      padding: 20px;
      box-shadow: 0 0 10px rgba(255, 215, 0, 0.2);
    }
    .fire-emoji {
      display: inline-block;
      animation: missileTrail 0.6s ease-in-out;
    }
    @keyframes missileTrail {
      0% { transform: translateY(-20px) scale(0.6); opacity: 0; }
      50% { transform: translateY(0px) scale(1.2); opacity: 1; }
      100% { transform: scale(1) rotate(15deg); }
    }
    .press-logos {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 20px;
      padding: 1rem;
      background-color: #d3d3d3;
      border-radius: 12px;
    }
    .press-logos img {
      height: 60px;
      vertical-align: middle;
      background-color: #fff;
      padding: 8px;
      border-radius: 6px;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .press-logos a:hover img {
      transform: scale(1.15);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }
    footer {
      background: #111;
      padding: 2rem 0;
    }
  </style>
</head>
<body>
  <section class="container my-5">
    <h2 class="section-title">Live Token Stats</h2>
    <div class="row g-4">
      <div class="col-md-6">
        <div class="stat-box text-center">
          <h5>Total Supply</h5>
          <div id="totalSupplyDisplay" class="fs-3 fw-bold">-</div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="stat-box text-center">
          <h5>Total Burned</h5>
          <div id="burnedSupply" class="fs-3 fw-bold">-</div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="stat-box text-center">
          <h5>30 Day Volume</h5>
          <div id="volume30Days" class="fs-3 fw-bold">0</div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="stat-box text-center">
          <h5>30 Day Burned</h5>
          <div id="burn30Days" class="fs-3 fw-bold">0</div>
        </div>
      </div>
      <div class="col-12">
        <div class="stat-box text-center">
          <h5>Charity & Community Dev Fund (Est. USD)</h5>
          <div id="donationUSD" class="fs-3 fw-bold">-</div>
        </div>
      </div>
    </div>
  </section>

  <script>
    const apiKey = "QRQ3R8MI37HB9HXIJ22YQ9CC734R28SM1S";
    const contract = "0x622a1297057ea233287ce77bdbf2ab4e63609f23";
    const totalSupply = 1000000000;

    async function fetchTokenSupply() {
      const res = await fetch(`https://api.bscscan.com/api?module=stats&action=tokensupply&contractaddress=${contract}&apikey=${apiKey}`);
      const data = await res.json();
      return Math.round(parseFloat(data.result) / 1e9);
    }

    async function fetchBurnAndVolume30Days() {
      const now = Math.floor(Date.now() / 1000);
      const thirtyDaysAgo = now - 30 * 24 * 60 * 60;
      let totalBurned = 0;
      let totalVolume = 0;
      let page = 1;
      const offset = 100;
      let keepGoing = true;

      while (keepGoing && page <= 10) {
        const url = `https://api.bscscan.com/api?module=account&action=tokentx&contractaddress=${contract}&page=${page}&offset=${offset}&sort=desc&apikey=${apiKey}`;
        const res = await fetch(url);
        const data = await res.json();

        if (!data.result || data.result.length === 0) break;

        for (const tx of data.result) {
          const time = parseInt(tx.timeStamp);
          if (time < thirtyDaysAgo) {
            keepGoing = false;
            break;
          }
          const amount = parseFloat(tx.value) / 1e9;
          totalVolume += amount;
          totalBurned += amount * 0.02;
        }

        if (data.result.length < offset) break;
        page++;
      }

      return {
        burned: Math.round(totalBurned),
        volume: Math.round(totalVolume)
      };
    }

    function animateCounter(id, start, end, duration, callback) {
      const el = document.getElementById(id);
      let current = start;
      const step = (end - start) / (duration / 30);
      const interval = setInterval(() => {
        current += step;
        if ((step > 0 && current >= end) || (step < 0 && current <= end)) {
          current = end;
          clearInterval(interval);
          if (callback) callback();
        }
        el.textContent = Math.round(current).toLocaleString();
      }, 30);
    }

    function explosionEffect(callback) {
      const el = document.createElement('div');
      el.style.position = 'fixed';
      el.style.top = '50%';
      el.style.left = '50%';
      el.style.transform = 'translate(-50%, -50%)';
      el.style.fontSize = '4rem';
      el.textContent = 'ðŸ’¥';
      document.body.appendChild(el);
      setTimeout(() => {
        document.body.removeChild(el);
        if (callback) callback();
      }, 800);
    }

    async function main() {
      const currentSupply = await fetchTokenSupply();
      const burned = totalSupply - currentSupply;
      const { burned: burn30Days, volume: volume30Days } = await fetchBurnAndVolume30Days();

      // Display initial total (includes 30-day burned tokens for starting visual)
      document.getElementById("donationUSD").textContent = `$${Math.round((836.34 + 18.88) * 650).toLocaleString()}`;
      document.getElementById("totalSupplyDisplay").textContent = (currentSupply + burn30Days).toLocaleString();
      document.getElementById("burnedSupply").textContent = (burned - burn30Days).toLocaleString();

      // Animate 30-day volume, then burned, then trigger explosion effect, then final total updates
      animateCounter("volume30Days", 0, volume30Days, 1300 * 1.3, () => {
        animateCounter("burn30Days", 0, burn30Days, 1600 * 1.6, () => {
          explosionEffect(() => {
            animateCounter("totalSupplyDisplay", currentSupply + burn30Days, currentSupply, 1000);
            animateCounter("burnedSupply", burned - burn30Days, burned, 1000);
          });
        });
      });
    }

    main();
  </script>
</body>
</html>
