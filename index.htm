<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>SuperDoge - The Crypto Superhero</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<style>
  body {
    background: linear-gradient(to bottom right, #0f0f0f, #1a1a1a);
    color: #fff;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  .container {
    max-width: 900px; /* snug container */
    padding-top: 2rem;
    padding-bottom: 2rem;
  }
  .hero {
    background: url('assets/superdoge-bg.jpg') center/cover no-repeat;
    padding: 80px 1rem 50px;
    text-align: center;
  }
  .hero h1 {
    font-size: 3.5rem;
    color: #ffd700;
    text-shadow: 2px 2px 8px #000;
    margin-bottom: 0.5rem;
  }
  .hero p.lead {
    max-width: 700px;
    margin: 0 auto 1.25rem;
    font-size: 1.15rem;
    line-height: 1.4;
  }
  .section-title {
    border-bottom: 2px solid #ffd700;
    display: inline-block;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
  }
  .press-logos {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 18px;
    padding: 1rem;
    background-color: #e6e6e6;
    border-radius: 10px;
  }
  .press-logos img {
    height: 48px;
    background-color: #fff;
    padding: 5px;
    border-radius: 6px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  .press-logos a:hover img {
    transform: scale(1.12);
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.3);
  }
  footer {
    background: #111;
    padding: 1.5rem 0;
    font-size: 0.9rem;
  }
  .fade-up {
    opacity: 0;
    transform: translateY(15px);
    transition: opacity 0.9s ease, transform 0.9s ease;
  }
  .fade-up.show {
    opacity: 1;
    transform: translateY(0);
  }

  /* Hit explosion effect bubble */
  #hit-effect {
    position: absolute;
    background: radial-gradient(circle, #ffdd00 0%, transparent 80%);
    border-radius: 50%;
    width: 60px;
    height: 60px;
    pointer-events: none;
    opacity: 0;
    transform: scale(0);
    transition: opacity 0.35s ease, transform 0.35s ease;
    z-index: 1000;
  }

  /* Shake animation for total supply on hit */
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    20%, 60% { transform: translateX(-5px); }
    40%, 80% { transform: translateX(5px); }
  }

  #totalSupplyDisplay.shake {
    animation: shake 0.5s;
  }
</style>
</head>
<body>

<section class="hero fade-up">
  <div class="container">
    <h1>SuperDoge</h1>
    <p class="lead">The First Ever Charity Crypto Superhero â€” Est. 2021</p>
    <p>SuperDoge is a deflationary token that started with 1,000,000,000 tokens in 2021. 100% of the supply is in circulation with no vesting period. Every transaction includes a 6% tax: 2% is permanently burned, 2% is redistributed to holders, and 2% funds the Foundation â€” supporting liquidity, charity, and community growth.</p>
  </div>
</section>

<div class="container fade-up position-relative" style="min-height: 270px;">
  <section id="stats" class="mb-4">
    <h2 class="section-title">Live Token Stats</h2>
    <div class="row g-3 text-center mb-4">
      <div class="col-md-4 position-relative">
        <h4>Total Supply</h4>
        <p id="totalSupplyDisplay" class="fs-4" style="font-weight:700; position: relative; z-index: 2;">Loading...</p>
        <div id="hit-effect"></div>
      </div>
      <div class="col-md-4">
        <h4>Total Burned</h4>
        <p id="burnedSupply" class="fs-4" style="font-weight:700;">Loading...</p>
      </div>
      <div class="col-md-4">
        <h4>Donated to Charity</h4>
        <p id="donationUSD" class="fs-4" style="font-weight:700;">$ Loading...</p>
      </div>
    </div>

    <div class="text-center">
      <h4 class="text-light mb-2">ðŸ“ˆ Token Volume in Last 30 Days: <span id="volume30Days">Loading...</span></h4>
      <h4 class="text-warning">ðŸ”¥ Permanently Burned Token in Last 30 Days: <span id="burn30Days">Loading...</span></h4>
    </div>
  </section>

  <!-- Additional sections omitted for brevity -->

</div>

<script>
  const apiKey = "QRQ3R8MI37HB9HXIJ22YQ9CC734R28SM1S";
  const contract = "0x622a1297057ea233287ce77bdbf2ab4e63609f23";
  const totalSupplyStart = 1000000000;

  // Animate numbers with slower timing (duration in ms)
  function animateCount(id, endValue, duration = 3000, callback) {
    const el = document.getElementById(id);
    let start = 0;
    const steps = 100; // number of increments
    const increment = endValue / steps;
    const stepTime = duration / steps;

    let currentStep = 0;
    const counter = setInterval(() => {
      currentStep++;
      start = increment * currentStep;
      if (currentStep >= steps) {
        el.textContent = Math.round(endValue).toLocaleString();
        clearInterval(counter);
        if (callback) callback();
      } else {
        el.textContent = Math.round(start).toLocaleString();
      }
    }, stepTime);
  }

  // Fetch circulating supply (in tokens)
  async function fetchTokenSupply() {
    const res = await fetch(`https://api.bscscan.com/api?module=stats&action=tokensupply&contractaddress=${contract}&apikey=${apiKey}`);
    const data = await res.json();
    return parseFloat(data.result);
  }

  // Fetch recent token transactions for 30-day volume and burned estimate
  async function fetchBurnAndVolume30Days() {
    const now = Math.floor(Date.now() / 1000);
    const thirtyDaysAgo = now - 30 * 24 * 60 * 60;
    let totalBurned = 0;
    let totalVolume = 0;
    let page = 1;
    const offset = 100;
    let keepGoing = true;

    while (keepGoing && page <= 10) {
      const url = `https://api.bscscan.com/api?module=account&action=tokentx&contractaddress=${contract}&page=${page}&offset=${offset}&sort=desc&apikey=${apiKey}`;
      const res = await fetch(url);
      const data = await res.json();
      if (!data.result || data.result.length === 0) break;

      for (const tx of data.result) {
        const time = parseInt(tx.timeStamp);
        if (time < thirtyDaysAgo) {
          keepGoing = false;
          break;
        }
        const amount = parseFloat(tx.value);
        totalVolume += amount;
        totalBurned += amount * 0.02; // 2% burned from transaction
      }

      if (data.result.length < offset) break;
      page++;
    }

    return {
      burned: totalBurned,
      volume: totalVolume
    };
  }

  function formatTokens(value) {
    return Math.round(value / 1e9).toLocaleString();
  }

  // Hit explosion effect
  function playHitEffect(burnAmountTokens, newTotalSupplyTokens) {
    const hitEffect = document.getElementById("hit-effect");
    const totalSupplyEl = document.getElementById("totalSupplyDisplay");

    // Position the hit effect centered over total supply text
    const rect = totalSupplyEl.getBoundingClientRect();
    const bodyRect = document.body.getBoundingClientRect();
    hitEffect.style.left = rect.left + rect.width / 2 - bodyRect.left - 30 + "px"; // 30 is half hit-effect width
    hitEffect.style.top = rect.top + rect.height / 2 - bodyRect.top - 30 + "px";
    hitEffect.style.opacity = "1";
    hitEffect.style.transform = "scale(1)";

    // Add shake animation to total supply
    totalSupplyEl.classList.add('shake');

    // After 500ms remove shake and fade hit effect
    setTimeout(() => {
      hitEffect.style.opacity = "0";
      hitEffect.style.transform = "scale(0)";
      totalSupplyEl.classList.remove('shake');
    }, 500);

    // Animate total supply downward to new value
    animateCount("totalSupplyDisplay", newTotalSupplyTokens / 1e9, 2000);
  }

  async function main() {
    const circulatingRaw = await fetchTokenSupply(); // raw token amount with decimals
    const { burned: burn30Raw, volume: volume30Raw } = await fetchBurnAndVolume30Days();

    // Calculate totals in tokens (not 1e9)
    const circulatingTokens = circulatingRaw;
    const burned30Tokens = burn30Raw;
    const volume30Tokens = volume30Raw;

    // Total burned = total supply start - current circulating + last 30 day burned tokens (show this sum initially)
    const totalBurnedTokens = (totalSupplyStart * 1e9 - circulatingTokens) + burned30Tokens;

    // Total supply display starts at (circulating + burned30) to include 30 day burned amount
    const initialTotalSupplyDisplay = circulatingTokens + burned30Tokens;
    const finalTotalSupply = circulatingTokens; // after explosion, total supply reflects circulating only

    // Show total burned (initial sum)
    document.getElementById("burnedSupply").textContent = formatTokens(totalBurnedTokens);

    // Show donated amount with $ sign (static approximation for now)
    const donatedBNB = 836.34 + 18.88;
    const donatedUSD = (donatedBNB * 650).toLocaleString('en-US', { style: 'currency', currency: 'USD' });
    document.getElementById("donationUSD").textContent = donatedUSD;

    // Show initial total supply (circulating + 30 day burned)
    document.getElementById("totalSupplyDisplay").textContent = formatTokens(initialTotalSupplyDisplay);

    // Animate Token Volume in Last 30 Days slower
    animateCount("volume30Days", volume30Tokens / 1e9, 3500);

    // Animate Burned Token in Last 30 Days with hit effect and update total supply
    animateCount("burn30Days", burned30Tokens / 1e9, 3500, () => {
      playHitEffect(burned30Tokens, finalTotalSupply);
      // Update burned supply after explosion to exclude the 30 day burned amount
      document.getElementById("burnedSupply").textContent = formatTokens(totalSupplyStart * 1e9 - circulatingTokens);
    });
  }

  // Scroll fade-in effect
  function setupScrollAnimations() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('show');
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.15 });

    document.querySelectorAll('.fade-up').forEach(el => observer.observe(el));
  }

  setupScrollAnimations();
  main();
</script>

</body>
</html>
