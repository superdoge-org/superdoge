<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>SuperDoge (SUPDOG) Stats</title>
<style>
  body { font-family: Arial, sans-serif; background:#121212; color:#eee; padding:20px; max-width: 600px; margin: auto; }
  h1 { text-align: center; }
  p { font-size: 1.2em; margin: 10px 0; }
  .loading { color: #777; }
</style>
</head>
<body>

<h1>SuperDoge (SUPDOG) Token Stats</h1>

<p>Charity Donations: <span id="charity-donations" class="loading">Loading...</span></p>
<p>Burned Tokens: <span id="burned-tokens" class="loading">Loading...</span></p>
<p>Circulating Supply: <span id="circulating-supply" class="loading">Loading...</span></p>
<p>Market Cap: <span id="market-cap" class="loading">Loading...</span></p>
<p>Holders: <span id="holders" class="loading">Loading...</span></p>
<p>Total Transactions: <span id="txcount" class="loading">Loading...</span></p>

<script>
(async () => {
  const apiKey = 'QRQ3R8MI37HB9HXIJ22YQ9CC734R28SM1S'; // Your BscScan API key
  const tokenAddress = '0x622A1297057ea233287ce77bdBF2AB4E63609F23';

  const charityWallets = [
    '0x2A8500831745891D2aC01403Da08883be4D58b72',
    '0x7Dd4eAE167bc55F9EA5df729936Dcc69af0B54B5',
    '0xdDE25A762653baf7D53725010ab3901E6E527523'
  ];

  const burnAddress = '0x000000000000000000000000000000000000dEaD';

  async function fetchJSON(url) {
    try {
      const res = await fetch(url);
      if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
      const data = await res.json();
      console.log(`Fetched from ${url}`, data);
      return data;
    } catch (err) {
      console.error(`Fetch error for ${url}:`, err);
      throw err;
    }
  }

  async function getBNBBalance(address) {
    try {
      const url = `https://api.bscscan.com/api?module=account&action=balance&address=${address}&tag=latest&apikey=${apiKey}`;
      const data = await fetchJSON(url);
      if (data.status !== '1') throw new Error('Error fetching BNB balance');
      return parseFloat(data.result) / 1e18;
    } catch (err) {
      console.error(`Error in getBNBBalance for ${address}:`, err);
      return null; // return null on error
    }
  }

  async function getTokenBalance(address) {
    try {
      const url = `https://api.bscscan.com/api?module=account&action=tokenbalance&contractaddress=${tokenAddress}&address=${address}&tag=latest&apikey=${apiKey}`;
      const data = await fetchJSON(url);
      if (data.status !== '1') throw new Error('Error fetching token balance');
      return parseFloat(data.result) / 1e18;
    } catch (err) {
      console.error(`Error in getTokenBalance for ${address}:`, err);
      return null;
    }
  }

  async function getTokenSupply() {
    try {
      const url = `https://api.bscscan.com/api?module=stats&action=tokensupply&contractaddress=${tokenAddress}&apikey=${apiKey}`;
      const data = await fetchJSON(url);
      if (data.status !== '1') throw new Error('Error fetching token supply');
      return parseFloat(data.result) / 1e18;
    } catch (err) {
      console.error('Error in getTokenSupply:', err);
      return null;
    }
  }

  async function getBNBPrice() {
    try {
      const url = `https://api.bscscan.com/api?module=stats&action=bnbprice&apikey=${apiKey}`;
      const data = await fetchJSON(url);
      if (data.status !== '1') throw new Error('Error fetching BNB price');
      return parseFloat(data.result.ethusd);
    } catch (err) {
      console.error('Error in getBNBPrice:', err);
      return null;
    }
  }

  async function getTokenPriceUSD() {
    try {
      const url = `https://api.dexscreener.com/latest/dex/tokens/${tokenAddress}`;
      const data = await fetchJSON(url);
      if (!data.pairs || data.pairs.length === 0) return 0;
      return parseFloat(data.pairs[0].priceUsd);
    } catch (err) {
      console.error('Error in getTokenPriceUSD:', err);
      return 0;
    }
  }

  async function getHolderCount() {
    try {
      const url = `https://api.bscscan.com/api?module=token&action=getTokenHolderCount&contractaddress=${tokenAddress}&apikey=${apiKey}`;
      const data = await fetchJSON(url);
      if (data.status !== '1') return 'N/A';
      return data.result;
    } catch (err) {
      console.error('Error in getHolderCount:', err);
      return 'N/A';
    }
  }

  async function getTransactionCount() {
    try {
      const url = `https://api.bscscan.com/api?module=account&action=txlist&address=${tokenAddress}&startblock=0&endblock=99999999&sort=desc&apikey=${apiKey}`;
      const data = await fetchJSON(url);
      if (data.status !== '1') return 'N/A';
      return data.result.length;
    } catch (err) {
      console.error('Error in getTransactionCount:', err);
      return 'N/A';
    }
  }

  try {
    console.log("Fetching charity balances...");
    const charityBNBsRaw = await Promise.all(charityWallets.map(getBNBBalance));
    console.log("Charity BNB balances raw:", charityBNBsRaw);

    // Filter out nulls from any failed fetches
    const charityBNBs = charityBNBsRaw.filter(x => x !== null);
    const totalCharityBNB = charityBNBs.reduce((a, b) => a + b, 0);

    console.log("Fetching burned tokens...");
    const burnedTokens = await getTokenBalance(burnAddress);
    console.log("Burned tokens:", burnedTokens);

    console.log("Fetching total supply...");
    const totalSupply = await getTokenSupply();
    console.log("Total supply:", totalSupply);

    const circulatingSupply = (totalSupply !== null && burnedTokens !== null) ? totalSupply - burnedTokens : null;

    console.log("Fetching BNB price...");
    const bnbPrice = await getBNBPrice();
    console.log("BNB price:", bnbPrice);

    console.log("Fetching token USD price...");
    const tokenPrice = await getTokenPriceUSD();
    console.log("Token USD price:", tokenPrice);

    const marketCap = (circulatingSupply !== null) ? circulatingSupply * tokenPrice : null;

    console.log("Fetching holders count...");
    const holders = await getHolderCount();
    console.log("Holders:", holders);

    console.log("Fetching transaction count...");
    const txCount = await getTransactionCount();
    console.log("Transactions:", txCount);

    // Update UI with fallback in case of nulls
    document.getElementById('charity-donations').innerText =
      totalCharityBNB !== null && bnbPrice !== null
        ? `${totalCharityBNB.toFixed(3)} BNB ($${(totalCharityBNB * bnbPrice).toFixed(0)})`
        : 'N/A';

    document.getElementById('burned-tokens').innerText =
      burnedTokens !== null
        ? `${burnedTokens.toLocaleString(undefined, {maximumFractionDigits: 0})} SUPDOG`
        : 'N/A';

    document.getElementById('circulating-supply').innerText =
      circulatingSupply !== null
        ? `${circulatingSupply.toLocaleString(undefined, {maximumFractionDigits: 0})} SUPDOG`
        : 'N/A';

    document.getElementById('market-cap').innerText =
      marketCap !== null
        ? `$${marketCap.toLocaleString(undefined, {maximumFractionDigits: 0})}`
        : 'N/A';

    document.getElementById('holders').innerText = holders;

    document.getElementById('txcount').innerText = txCount;

  } catch (err) {
    console.error('Unexpected error in main script:', err);
    const els = ['charity-donations', 'burned-tokens', 'circulating-supply', 'market-cap', 'holders', 'txcount'];
    els.forEach(id => {
      document.getElementById(id).innerText = 'Error';
    });
  }
})();
</script>
</body>
</html>
